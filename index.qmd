---
title: "ALS data coverage in Canadian forests"
format: html
engine: knitr
lightbox: true
date: today
language: 
  title-block-published: "Last modified"
---

This webpage is designed to present the current status of airborne laser scanning (ALS) data coverage across **Canada's forested landscapes**. We present a collection of maps and descriptive statistics that illustrate the current status and availability of ALS data, specifically focusing on its applications within forestry. ALS acquisitions outside Canada's forested ecozones (e.g. in urban areas) or data acquired for research projects are not included.

This webpage accompanies the publication by [White et al. 2025](https://doi.org/10.1139/cjfr-2024-0255), and is designed to keep the statistics and maps presented in the paper up to date.

::: {.callout-note appearance="minimal"}

*White, J.C., Tompalski, P., Bater C.W., Wulder, M.A., Fortin, M., Hennigar C., Robere-McGugan, G., Sinclair, I., White, R., (2025). Enhanced forest inventories in Canada: implementation, status, and research needs. Canadian Journal of Forest Research, 55: 1-37. [doi.org/10.1139/cjfr-2024-0255](https://doi.org/10.1139/cjfr-2024-0255). *
:::

Information on this website is periodically updated to ensure the most current and accurate representation of ALS data coverage. See [ALS coverage data sources](data.qmd) to find the date the coverage was updated for each jurisdiction.

# Most recent coverage summary

```{r, echo=F, warning=F, message=F}
source("R/0000_setup.R")
# library(tidyverse);library(magrittr)
Stats <- readRDS("../5_lidarStatusCanada/data/Stats.rds")
theTable <-Stats$theTable

total_ALS_area <- Stats$total_ALS_area
total_ALS_perc <- Stats$total_ALS_perc
managed_ALS_perc  <- round(Stats$managed_ALS_perc,1)
forested_ALS_perc <- round(Stats$forested_ALS_perc,1)

```

```{r, echo=F, warning=F, message=F}
library(htmltools)
library(bslib)
library(bsicons)


vbs <- list(
  value_box(
    title = "Total ALS Coverage",
    value = paste0(format(round(total_ALS_area / 1000000, 2), big.mark=",", nsmall = 0),"M km²"),
    # value = paste0(format(total_ALS_area, big.mark=",", nsmall = 0)," km²"),
    # showcase = bs_icon("graph-up"),
    theme = "primary",
    p(paste0(format(total_ALS_perc, nsmall = 1),"% of total land area of Canada."))
    # p("hit me", bs_icon("suit-spade"))
  ),
  
  
  value_box(
    title = "Coverage of forested ecozones",
    value = paste0(format(forested_ALS_perc, nsmall = 1),"%"),
    theme = "secondary",
    # showcase = bs_icon("graph-up")
  ),
  
  value_box(
    title = "Coverage of managed forests",
    value = paste0(format(managed_ALS_perc, nsmall = 1),"%"),
    # showcase = bs_icon("tree-fill")
    theme = "success",
  )
)
layout_column_wrap(
  width = "200px",
  !!!vbs
)

```

The total area of ALS coverage in Canada is currently `r format(total_ALS_area, scientific=FALSE, big.mark=",")` km^2^, which corresponds to approximately **`r total_ALS_perc`%** of the total land area of the country. The coverage of all forested ecozones is approximately **`r forested_ALS_perc`%**, while the coverage of managed forests is approximately **`r managed_ALS_perc`%**.

```{r, echo=F, warning=F, message=F}
theTable %>%
  #inlcude only ALS coverage columns
  # select(Jurisdiction, `ALS area (total)`, `ALS area (managed forest)`) %>%
  knitr::kable()  
```

# Maps

The map showing the overall ALS coverage is presented below. Additional [maps](maps.qmd) show [**acquisition year**](maps.qmd#maps-year), [**point cloud density**](maps.qmd#maps-density), and [**areas of multiple overlapping acquisitions**](maps.qmd#maps-overlap). More detailed maps are available for [western](maps-west.qmd) and [eastern](maps-east.qmd) parts of the country.

![](img/map0_overview.png){.lightbox}

# Acquisitions over time

Cumulative area of ALS data acquired by jurisdictions, by year, including overlapping acquisitions. P<sub>J</sub> = percentage of jurisdictional area that is covered by ALS data. P<sub>M</sub> = percentage of jurisdictional managed forest area that is covered by ALS data.

```{r, echo=F, warning=F, message=F, fig.height=5, fig.width=8}
library(ggh4x)
library(ggtext)

prov_clrs <- tribble(
  ~Jurisdiction, ~color,
  "AB", "#1f78b4",
  "BC", "#33a02c",
  
  "NB", "#6a3d9a",
  
  "NS", "#ff7f00",
  
  "ON", "#666666",
  "PE", "#800000",
  "QC", "#b15928",
  "SK", "#c71585"
)

clrs <- prov_clrs$color
names(clrs) <- (prov_clrs$Jurisdiction)

dataForTheFigure <- readRDS("../5_lidarStatusCanada/data/dataForTheFigure.rds")
DF_area <- dataForTheFigure$DF_area
DF_area_PE <- dataForTheFigure$DF_area_PE
DF_area_NB <- dataForTheFigure$DF_area_NB
DF_area_recent_adj <- dataForTheFigure$DF_area_recent_adj


credits_text2 <- glue("Source: ptompalski.github.io/CanadaForestLidarCoverage\n Figure generated on {today()}. \nNote that figure may not be exhaustive.")


detect_label_overlaps <- function(x, y, x_size, y_size) {
  n <- length(x)
  if (!all(length(y) == n)) stop("x and y must be the same length.")
  
  if (length(x_size) == 1) x_size <- rep(x_size, n)
  if (length(y_size) == 1) y_size <- rep(y_size, n)
  
  if (!all(lengths(list(x, y, x_size, y_size)) == n)) {
    stop("All input vectors must be the same length after recycling.")
  }
  
  overlaps <- matrix(FALSE, nrow = n, ncol = n)
  
  for (i in 1:(n - 1)) {
    for (j in (i + 1):n) {
      if (anyNA(c(x[i], x[j], y[i], y[j], x_size[i], x_size[j], y_size[i], y_size[j]))) {
        next  # skip this pair
      }
      
      x_overlap <- abs(x[i] - x[j]) < (x_size[i] + x_size[j]) / 2
      y_overlap <- abs(y[i] - y[j]) < (y_size[i] + y_size[j]) / 2
      
      if (x_overlap && y_overlap) {
        overlaps[i, j] <- TRUE
        overlaps[j, i] <- TRUE
      }
    }
  }
  
  return(overlaps)
}




repel_y_by_pairs <- function(y, overlap_pairs, buffer = 40) {
  y_new <- y
  
  for (k in seq_len(nrow(overlap_pairs))) {
    i <- overlap_pairs[k, 1]
    j <- overlap_pairs[k, 2]
    
    # Skip if either is NA
    if (is.na(y_new[i]) || is.na(y_new[j])) next
    
    # Compute vertical distance and target shift
    dist_y <- abs(y_new[i] - y_new[j])
    shift <- (buffer + (0.5 * dist_y))
    
    # Determine direction based on current ordering
    if (y_new[i] < y_new[j]) {
      y_new[i] <- y_new[i] - shift
      y_new[j] <- y_new[j] + shift
    } else {
      y_new[i] <- y_new[i] + shift
      y_new[j] <- y_new[j] - shift
    }
  }
  
  return(y_new)
}


x <- DF_area_recent_adj$x
y <- DF_area_recent_adj$y

overlap_matrix <- detect_label_overlaps(x = x, y = y, x_size = 2, y_size = 100)

overlap_pairs <- which(overlap_matrix, arr.ind = TRUE)
overlap_pairs <- overlap_pairs[overlap_pairs[, 1] < overlap_pairs[, 2], , drop = FALSE]

y_new <- repel_y_by_pairs(y = y, overlap_pairs = overlap_pairs, buffer = 50)

DF_area_recent_adj$.adjusted_y <- y_new



g <- DF_area %>%
  ggplot(aes(YEAR2, Area_km2_cumulative / 1000, color=Jurisdiction, group=Jurisdiction)) + 
  geom_pointpath(mult=0.25, shape=21, size=2)+

  geom_curve(aes(x = x, y = .adjusted_y, xend = YEAR2, yend = Area_km2_cumulative / 1000),
             data = DF_area_recent_adj, #%>% filter(Jurisdiction %in% c("NB", "PE")),
             curvature = -0.2,
             arrow = arrow(length = unit(0.1, "inches"), angle = 20, type = "closed")
  )             +

  
  
  geom_richtext(data=DF_area_recent_adj,
                aes(x=x, y=.adjusted_y , label=label_all),
                hjust=0,
                show.legend  = FALSE,
                size=3,
                family=thefont
                # alpha=0.5
  )+

  geom_point(data=DF_area_PE, shape=21, fill="white") + 
  geom_point(data=DF_area_NB, shape=21, fill="white", size=2) + 
  geom_point(data=DF_area_recent_adj, size=2) + 
  xlab("Acquisition year")+ylab(expression(paste("Area [thousands of km"^2*"]")))+
  scale_color_manual(values = clrs) +
  
  guides(color=guide_legend(position = "inside"))+
  # theme(legend.position.inside = c(0.1, 0.7))+
  theme(legend.position="none")+
  # xlim(2004, 2025)+
  ylim(0, max(DF_area$Area_km2_cumulative/1000 * 1.1))+
  # scale_x_continuous(breaks = c(2005, 2010, 2015, 2020, 2025), limits = c(2004, 2027))+
  scale_x_continuous(expand = expansion(mult = c(0, 0.1)))+
  labs(caption = credits_text2)


g
```

![](img/animation_ALS_over_time.gif){.lightbox}
